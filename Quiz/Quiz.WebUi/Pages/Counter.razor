@page "/counter"
@using Quiz.Contracts;

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>
<h2>@_randomGuid</h2>
<h3>@_randomNumber</h3>
<h4>@_count</h4>
<h5>@_returnedguid</h5>
<h6>@_question</h6>
<h7> @_listOfQuestions</h7>

<p role="status">Current count: @currentCount</p>


<br />  
<p> Enter your question and choose how much points you can get</p>
<input type="text" class="form-control" @bind-value="@_question" />
<input type="number" @bind-value="@_points" />
<br />
<button class="btn btn-primary" @onclick="IncrementCountAsync">Add</button>
<ul>
@foreach (var ques in _listOfQuestions)
{
    <li>
        @ques.Guid - @ques.QuestionContent
    </li>
}
</ul>

@code {
    private string _randomGuid;
    private string _randomNumber;
    private Guid _returnedguid;
    private string _question = "???";
    private int _points;

    private int currentCount = 0;
    private int _count = 10;
    private List<GetQuestionIdAndContent> _listOfQuestions;



    public Counter()
    {
        _randomGuid = "12";
        _randomNumber = "1";
        _returnedguid = Guid.Empty;
        _listOfQuestions = new List<GetQuestionIdAndContent>();

    }


    private async Task IncrementCountAsync()
    {
        currentCount++;
        await RefreshGuidAsync();
        await RefreshNumAsync();
        await AddQuestionAsync();
        _question = string.Empty;
        await LoadTop5Async();
    }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task RefreshGuidAsync()
    {
        var quizClient = new HttpClient();
        quizClient.BaseAddress = new Uri("http://localhost:5271");
        var response = await quizClient.GetAsync("tests/random-guid");
        var body = await response.Content.ReadAsStringAsync();
        _randomGuid = body;    
    }

    private async Task RefreshNumAsync()
    {
        var quizNum = new HttpClient();
        quizNum.BaseAddress = new Uri("http://localhost:5271");
        var response = await quizNum.GetAsync("tests/random-number");
        var body = await response.Content.ReadAsStringAsync();                      //content to ta zserializowana forma
        _randomNumber = body;

    }

    private async Task AddQuestionAsync()
    {
        var sqlquery = new HttpClient();
        sqlquery.BaseAddress = new Uri("http://localhost:5271");
        var response = await sqlquery.PostAsync("tests/to-database", JsonContent.Create(new AddQuestionBody()
            {
                QuestionContent = _question,
                Points = _points
            }));

        var body = await response.Content.ReadFromJsonAsync<Guid>();
        _returnedguid = body;

    }
    private async Task LoadTop5Async()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("http://localhost:5271");
        var response = await httpClient.GetAsync("tests/top-five");
        _listOfQuestions = await response.Content.ReadFromJsonAsync<List<GetQuestionIdAndContent>>();
        
    }

    private void Count()
    {
        _count++;

    }





}







