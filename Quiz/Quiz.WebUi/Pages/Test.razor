
@page "/test"
@using Quiz.Contracts;
@using Quiz.WebUi.ApiClients;
@inject IQuizApiClient QuizApiClient;

<PageTitle>Test</PageTitle>

<h1>Quiz</h1>

<style>
    .select-input {
        border: 2px solid black;
        border-radius: 0;
        padding: 8px;
        font-size: 18px;
        width: 250px;
        height: 100px;
        background-color: #EAF5FF;
        color: black;
        font-weight: bold;
    }

        .select-input option {
            font-size: 18px;
            color: black;
            background-color: #EAF5FF;
            font-weight: bold;
        }

            .select-input option:nth-child(even) {
                background-color: #D6EBFF;
            }

    .frame {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 16px;
        background-color: #f5f5f5;
        flex-direction: column;
        text-align: center;
        display: flex;
        justify-content: center;
    }

    .frame-title {
        font-weight: bold;
        margin-bottom: 16px;
        text-align: left;
    }

    .frame-left {
        text-align: left;
        margin-right: 16px;
    }

    .frame-center {
        text-align: center;
    }
</style>

@if (_startMode)
{
    <div class="frame">
        <div class="frame-left">
            <span class="frame-title">
                Hi!<br>
                Try your hand at taking the quiz. Select a question category.<br>
                If you want to take a test from several categories - select them with the mouse, pressing Ctrl on the keyboard.
            </span>
        </div>

        <div class="frame-center">
            <div style="margin-top: 10px;">
                <div class="centered">
                    <InputSelect class="select-input" @bind-Value="_selectedCategories">
                        @if (_listOfCategories != null)
                        {
                            @foreach (var cat in _listOfCategories)
                            {
                                <option value="@cat.ID">@cat.Name</option>
                            }
                        }
                    </InputSelect>
                </div>

                <p style="margin-top: 10px;">
                    <div class="centered">
                        <input type="button" style="font-weight: bold;" class="btn btn-info" value="Create new test" @onclick="CreateTestOnClick" />
                    </div>
                </p>
            </div>
        </div>
    </div>
}

@if (_testGeneratedButNotStarted && !_startMode)
{
    <input type="button" style="font-weight: bold;" class="btn btn-info" value="Start" @onclick="StartTest" />
}

@if( _testMode && !_testGeneratedButNotStarted && !_startMode)
{

    <span style="font-weight: bold;">@_TestQ.QuestionContent</span>
    <br />
    

  

    @if (_testPageIndex > 0)
    {

        <input type="button" style="font-weight: bold" class="btn btn-info" value="Back" @onclick="PreviousTestPageAsync" />
    }
    else
    {
        <input type="button" style="font-weight: bold" class="btn btn-info" value="Back" disabled />
    }



    if (_testPageIndex < TestSize)
    {
        <input type="button" style="font-weight: bold" class="btn btn-info" value="Next" @onclick="NextTestPageAsync" />
    }
    else
    {
        <input type="button" style="font-weight: bold" class="btn btn-info" value="Next" disabled />

    }

}


@code{

    private List<CategoryInfo> _listOfCategories;
    private string [] _selectedCategories= new string[0];
    private Guid _testGuid;
    private int _testPageIndex = 0;
    private const int TestSize = 10;
    //private string _questionContent = " xx";

    private bool _startMode = true;
    private bool _testGeneratedButNotStarted;  // it will be false after pressing the "start" button, which will start the test
    private bool _testMode;

    private TestQuestionBody _TestQ;


    public Test()
    {
        _TestQ = new TestQuestionBody();

    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategoriesAsync();
    }

    private async Task CreateTestOnClick()
    {
        await CreateTestAsync();
        _startMode = false;                //false until the test is canceled or the test is completed and you can return to the "start page"
        _testGeneratedButNotStarted = true;
        
    }
    private async Task StartTest()   //here will be, among other things, a method that adds a start datetime to the Tests table
    {
        await GetTestQuestionAsync();
        _testGeneratedButNotStarted = false;
        _testMode = true;

    }

    private async Task PreviousTestPageAsync()
    {
        _testPageIndex -= 1;
        await GetTestQuestionAsync();


    }

    private async Task NextTestPageAsync()
    {
        _testPageIndex += 1;
        await GetTestQuestionAsync();

    }


    //QuizApiClient methods below
    private async Task GetCategoriesAsync()
    {
        _listOfCategories = await QuizApiClient.GetCategoriesAsync();
    }


    private async Task CreateTestAsync()
    {
        _testGuid =  await QuizApiClient.CreateTestAsync(_selectedCategories.ToList());
    }

  

    private async Task GetTestQuestionAsync()
    {
        _TestQ = await QuizApiClient.GetTestQuestionAsync(_testGuid, _testPageIndex);
    }
   
   

}