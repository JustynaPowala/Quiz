@page "/questions-designer"

@using Quiz.Contracts;
@using Quiz.WebUi.ApiClients;
@using System.ComponentModel.DataAnnotations; @*//*@
@inject IQuizApiClient  QuizApiClient;  //property in class QuestionDesginer. Początkowo nie wie mój qestions designer co zrobić. Muszę "połączyć" IQuizApiClient z  HttpQuizApiClient(który ma zawarty ten interfejs). To połączenie jest zrobione poprzez services w klasie program.//
@inject ILogger<QuestionsDesigner> Logger //

<PageTitle>Questions Designer</PageTitle>

<h1>Questions Designer</h1>
<h2>@_isCorrect</h2>

<EditForm Model="@questionModel" OnValidSubmit="@HandleValidSubmit">     
    
    <p>
        <span style="font-weight: bold;">Enter content of Your question</span>
        <br />
        <InputText id="question" class="half-screen-textbox"   @bind-Value="questionModel.Question" />
    
    </p>
    <p>Choose how many points you can get in this question
        <br />
        <input type="number" additionalatributes max="10" min="1" @bind-value="questionModel.Points" />
    </p>
  
        <p>Select question category
        <br />
        <InputSelect @bind-Value="questionModel.Category">

            <option value="default" disabled selected>Select a category</option>
            <option value="history">History</option>
            <option value="chemistry">Chemistry</option>
            <option value="mathematics">Mathematics</option>
            <option value="music">Music</option>
            <option value="information technology">Information technology</option>
        </InputSelect>
    </p>
    
    <p>Select whether the question is single-choice or multiple-choice
        <br />
        <InputSelect @bind-Value="questionModel.SelectionMultiplicity">
            <option value="default" disabled selected>Choose selection multiplicity</option>
            <option value="single">Single</option>
            <option value="multiple">Multiple</option>
        </InputSelect>
    </p>
    

    <DataAnnotationsValidator />
    <ValidationSummary />
    <br />
    <button type="submit" class="btn btn-primary" @onclick="IncrementCountAsync">Add</button>    @*//incrementocuntasync zawiera handlevalidsubmit*@
</EditForm>

<br />  
@*<input type="number" @bind-value="@_points" />*@
<br />
<br />

<ul>
@foreach (var ques in _listOfQuestions)
{
    <li>
        @ques.Guid - @ques.QuestionContent
    </li>
}
</ul>




@*//tu był add button*@

@*it will be use to answers text box*@
<style>
    .half-screen-textbox{
        width:50vw;
    }
</style>      


@if (_answers == true)
{
    <p>Add answers to your question. Check the box if it is correct answer.</p>
    <input type="text" class="half-screen-textbox" @bind-value="@_answer" />
    <input type="checkbox" @bind-value="@_isCorrect" />
} 

@if (_answers == true)
{
    <button class="btn btn-primary" @onclick="AddingAnswerOnButtonClickedAsync">Add answer</button>
}


<ol>
    @foreach (var answ in _listOfAnswers)
    {
        <li>
            @answ.AnswerContent - @if (@answ.IsCorrect == true)
            {
                @_correct
            }
            else  { @_notCorrect }

            <button @onclick="() => DeletingAnswerAsync(answ.QeGuid,answ.AnswGuid)">Delete</button>
        </li>
    }


</ol>

@code {
    public class QuestionModel
    {
        [Required]
        public string? Question { get; set; }

        [Required]
        public int Points { get; set; }

        [Required]
        public string? Category { get; set; }

        [Required]
        public string? SelectionMultiplicity { get; set; }  
    }

    private QuestionModel questionModel = new();

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Handlesubmit called");
    }

   
    private Guid _returnedguid;
    private Guid _questionID;
    private Guid _answerID;
    private string _answer;
    private bool _answers = false;
    private bool _isCorrect;


    private string _correct = "Correct";
    private string _notCorrect = "Not correct";


    private List<GetQuestionIdAndContent> _listOfQuestions;
    private List<GetAllInfosAboutAnswer> _listOfAnswers;



    public QuestionsDesigner()
    {
        _returnedguid = Guid.Empty;
        _listOfQuestions = new List<GetQuestionIdAndContent>();
        _listOfAnswers = new List<GetAllInfosAboutAnswer>();

    }


    private async Task IncrementCountAsync()
    {           
        await HandleValidSubmit();
        await AddQuestionAsync();
        questionModel.Question = string.Empty;
        questionModel.Points = 1;
        questionModel.Category = "default";
        questionModel.SelectionMultiplicity = "default";
        _answers = true;
        //await LoadTop5Async();
    }

    private async Task AddingAnswerOnButtonClickedAsync()
    {
        await AddQuestionAnswerAsync();
        await GetListOfAnswersAsync();
    }

    private async Task DeletingAnswerAsync(Guid questionID, Guid answerID)
    {
        _questionID = questionID;
        _answerID = answerID;
        await DeleteAnswerAsync();
        await GetListOfAnswersAsync();

    }


    private async Task AddQuestionAsync()
    {
        _questionID = await QuizApiClient.AddQuestionAsync(questionModel.Question, questionModel.Points, questionModel.Category, questionModel.SelectionMultiplicity);  //metoda dodaje pytanie i zwraca też guida. guid pod prywatne pole, bo będzie potrzebny do dodawania odpowiedzi

    }

    private async Task AddQuestionAnswerAsync()
    {

        _answerID = await QuizApiClient.AddQuestionAnswerAsync(_questionID, _answer, _isCorrect);  ////
    }

    private async Task DeleteAnswerAsync()
    {
        await QuizApiClient.DeleteAnswer(_questionID, _answerID);
    }

    private async Task GetListOfAnswersAsync()
    {
        _listOfAnswers= await QuizApiClient.GetListOfAnswersAsync(_questionID);
    }
    private async Task LoadTop5Async()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("http://localhost:5271");
        var response = await httpClient.GetAsync("tests/top-five");
        _listOfQuestions = await response.Content.ReadFromJsonAsync<List<GetQuestionIdAndContent>>();

    }


    


}


