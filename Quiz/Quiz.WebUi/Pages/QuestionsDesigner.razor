@page "/questions-designer"

@using Quiz.Contracts;
@using Quiz.WebUi.ApiClients;
@inject IQuizApiClient  QuizApiClient;  //property in class QuestionDesginer. Początkowo nie wie mój qestions designer co zrobić. Muszę "połączyć" IQuizApiClient z  HttpQuizApiClient(który ma zawarty ten interfejs). To połączenie jest zrobione poprzez services w klasie program.//

<PageTitle>Questions Designer</PageTitle>

<h1>Questions Designer</h1>
<h2>@_isCorrect</h2>

<p> Enter your question and choose how much points you can get</p>
<input type="text" class="form-control" @bind-value="@_question" />
<br />  
<input type="number" @bind-value="@_points" />
<br />
<br />

<ul>
@foreach (var ques in _listOfQuestions)
{
    <li>
        @ques.Guid - @ques.QuestionContent
    </li>
}
</ul>




<label 
    <InputSelect @bind-Value = "@_category">

    <option value="default">Select a category</option>
    <option value="history">History</option>
    <option value="chemistry">Chemistry</option>
    <option value="mathematics">Mathematics</option>
    <option value="music">Music</option>
    <option value="information technology">Information technology</option>
    </InputSelect>
    
</label>


<label
    <InputSelect @bind-Value = "@_selectionMultiplicity">

    <option value="default">Choose selection multiplicity</option>
    <option value="single">Single</option>
    <option value="multiple">Multiple</option>
    </InputSelect>

</label>

<button class="btn btn-primary" @onclick="IncrementCountAsync">Add</button>


@*it will be use to answers text box*@
<style>
    .half-screen-textbox{
        width:50vw;
    }
</style>      


@if (_answers == true)
{
    <p>Add answers to your question. Check the box if it is correct answer.</p>
    <input type="text" class="half-screen-textbox" @bind-value="@_answer" />
    <input type="checkbox" @bind-value="@_isCorrect" />
} 

@if (_answers == true)
{
    <button class="btn btn-primary" @onclick="AddingAnswerOnButtonClickedAsync">Add answer</button>
}


<ul>
    @foreach (var answ in _listOfAnswers)
    {
        <li>
            @answ.AnswGuid - @answ.AnswerContent  <button @onclick="() => DeletingAnswerAsync(answ.QeGuid,answ.AnswGuid)">Delete</button>
        </li>
    }


</ul>

@code {

    private Guid _returnedguid;
    private string _question = "???";
    private int _points = 0;
    private string _category = "default";
    private string _selectionMultiplicity = "default";
    private Guid _questionID;
    private Guid _answerID;
    private string _answer;
    private bool _answers = false;
    private bool _isCorrect; 


    private List<GetQuestionIdAndContent> _listOfQuestions;
    private List<GetAllInfosAboutAnswer> _listOfAnswers;



    public QuestionsDesigner()
    {
        _returnedguid = Guid.Empty;
        _listOfQuestions = new List<GetQuestionIdAndContent>();
        _listOfAnswers = new List<GetAllInfosAboutAnswer>();

    }


    private async Task IncrementCountAsync()
    {           
        await AddQuestionAsync();
        _question = string.Empty;
        _points = 0;
        _category = "default";
        _selectionMultiplicity = "default";
        _answers = true;
        //await LoadTop5Async();
    }

    private async Task AddingAnswerOnButtonClickedAsync()
    {
        await AddQuestionAnswerAsync();
        await GetListOfAnswersAsync();
    }

    private async Task DeletingAnswerAsync(Guid questionID, Guid answerID)
    {
        _questionID = questionID;
        _answerID = answerID;
        await DeleteAnswerAsync();
        await GetListOfAnswersAsync();
        
    }


    private async Task AddQuestionAsync()
    {
        _questionID = await QuizApiClient.AddQuestionAsync(_question, _points, _category, _selectionMultiplicity);  //metoda dodaje pytanie i zwraca też guida. guid pod prywatne pole, bo będzie potrzebny do dodawania odpowiedzi

    }

    private async Task AddQuestionAnswerAsync()
    {

        _answerID = await QuizApiClient.AddQuestionAnswerAsync(_questionID, _answer, _isCorrect);  ////
    }

    private async Task DeleteAnswerAsync()
    {
        await QuizApiClient.DeleteAnswer(_questionID, _answerID);
    }

    private async Task GetListOfAnswersAsync()
    {
       _listOfAnswers= await QuizApiClient.GetListOfAnswersAsync(_questionID);
    }
    private async Task LoadTop5Async()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("http://localhost:5271");
        var response = await httpClient.GetAsync("tests/top-five");
        _listOfQuestions = await response.Content.ReadFromJsonAsync<List<GetQuestionIdAndContent>>();
        
    }

  

}
