@page "/questions-designer"

@using Quiz.Contracts;
@using Quiz.WebUi.ApiClients;
@using System.ComponentModel.DataAnnotations; @*//*@
@using Classes;
@inject IQuizApiClient  QuizApiClient;  //property in class QuestionDesginer. Początkowo nie wie mój qestions designer co zrobić. Muszę "połączyć" IQuizApiClient z  HttpQuizApiClient(który ma zawarty ten interfejs). To połączenie jest zrobione poprzez services w klasie program.//
@inject ILogger<QuestionsDesigner> Logger //

<PageTitle>Questions Designer</PageTitle>

<h1>Questions Designer</h1>

<style>
    .half-screen-textbox {
        width: 50vw;
    }
</style>

<style>
    .checkbox-design{
        height:30px; width:30px
    }
</style>

<EditForm Model="@_questionModel" OnValidSubmit="@HandleValidSubmit">     
    
    <p>
        <span style="font-weight: bold;">Enter content of Your question</span>
        <br />
        <InputText id="question" class="half-screen-textbox"   @bind-Value="_questionModel.Question" />
    
    </p>
    <p>
        <span style="font-weight: bold;">Choose how many points you can get in this question</span>
        <br />
        <input type="number" additionalatributes max="10" min="1" @bind-value="_questionModel.Points" />
    </p>
  
        <p>
        <span style="font-weight: bold;">Select question category</span>
        <br />
        <InputSelect @bind-Value="_questionModel.Category">

            <option value="default" disabled selected>Select a category</option>
            <option value="history">History</option>
            <option value="chemistry">Chemistry</option>
            <option value="mathematics">Mathematics</option>
            <option value="music">Music</option>
            <option value="information technology">Information technology</option>
        </InputSelect>
    </p>
    
    <p>
        <span style="font-weight: bold;">Select whether the question is single-choice or multiple-choice</span>
        <br />
        <InputSelect @bind-Value="_questionModel.SelectionMultiplicity">
            <option value="default" disabled selected>Choose selection multiplicity</option>
            <option value="single">Single</option>
            <option value="multiple">Multiple</option>
        </InputSelect>
    </p>
    

    <DataAnnotationsValidator />
    <ValidationSummary />
    <br />
    <button type="submit" class="btn btn-primary" >Save</button>  
</EditForm>

<EditForm Model="@_answerModel" OnValidSubmit="@HandleValidAnswerSubmit">
    @if (_answers == true)
    {
        <p>
            <span style="font-weight: bold;">Add answers to your question. Check the box if it is correct answer</span>
        </p>
        <InputText id="answer" class="half-screen-textbox" @bind-Value="_answerModel.Answer" />

        <input type="checkbox" class="checkbox-design"  @bind-value="_answerModel.IsCorrect" />

        <br />
        <button type="submit" class="btn btn-primary">Add answer</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    }
</EditForm>

@if (_answers == true)
{
    
    @if (_listOfAnswers == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var answersCounting = 1;
        <table class="table">
            <thead>
                <tr>
                    <th>No.</th>
                    <th>Answer Content</th>
                    <th>Is Correct?</th>
                    <th>Remove</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var correct = "Yes";
                    var notCorrect ="No";
                }



                @foreach (var answ in _listOfAnswers)
                {

                    <tr>
                        <td>@(answersCounting++)</td>
                        <td>@answ.AnswerContent</td>
                        <td>@(answ.IsCorrect ? correct : notCorrect)</td>
                        <td><button @onclick="() => DeletingAnswerAsync(answ.QeGuid, answ.AnswGuid)"><i class="oi oi-trash"></i></button></td>
                    </tr>

                }

            </tbody>
        </table>
    }
}


<InputSelect @bind-Value="_category">
    <option value="history">History</option>
    <option value="chemistry">Chemistry</option>
    <option value="mathematics">Mathematics</option>
    <option value="music">Music</option>
    <option value="information technology">Information technology</option>
</InputSelect>
<input type="text" @bind-value="@_searchString" />
<input type="button" value="Search" @onclick="SearchIssues" />

 @if (_listOfQuestions == null)
    {
    <p><em>Loading...</em></p>
}
else
{   
    
    

    var questionCounting = 1 + _pageIndex * 10;
    <table class="table">
        <thead>
            <tr>
                @*<th>Modify</th>*@
                <th>No.</th>
                <th>Quetion content</th>
            </tr>
        </thead>
        <tbody>

            @{
                var count = _listOfQuestions.Count;
                if (_listOfQuestions.Count > PageSize)
                { count = PageSize; }
            }

            
            @for (int i = 0; i < count; i++)
           
                {       
                <tr>
                        @*<td><button @onclick="() => </button></td>*@
                        <td>@(questionCounting++)</td>
                        <td>@_listOfQuestions[i].QuestionContent</td>
                    </tr>          
                }     
            </tbody>
        @if (_pageIndex > 0)
        {

            <input type="button" class="btn btn-primary" value="Back" @onclick="PreviousPageAsync" />
        }
        else
        {
            <input type="button" class="btn btn-primary" value="Back" disabled />
        }

        @if (_listOfQuestions.Count != 0)
        {


            if (_listOfQuestions.Count > PageSize)
            {
                <input type="button" class="btn btn-primary" value="Next" @onclick="NextPageAsync" />
            }
            else
            {
                <input type="button" class="btn btn-primary" value="Next" disabled />
            }
        }

        </table>
}




@code {

    private Guid _returnedguid;
    private Guid _questionID;
    private Guid _answerID;
    private bool _answers = false;
    private string _category = "history";
    private string _searchString = string.Empty;
    private int _pageIndex = 0;
    private const int PageSize = 10;


    private List<QuestionInfo> _listOfQuestions;

    private async Task SearchIssues()
    {
        _pageIndex = 0;
        await GetQuestionsAsync();

    }

    protected override async Task OnInitializedAsync()
    {
        await GetQuestionsAsync();
    }

    private async Task PreviousPageAsync()
    {
        _pageIndex -= 1;
        await GetQuestionsAsync();

    }

    private async Task NextPageAsync()
    {
        _pageIndex += 1;
        await GetQuestionsAsync();

    }

    private QuestionModel _questionModel = new QuestionModel();


    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Handlesubmit called");

        await AddQuestionAsync();
        _questionModel.Question = string.Empty;
        _questionModel.Points = 1;
        _questionModel.Category = "default";
        _questionModel.SelectionMultiplicity = "default";
        _answers = true;
    }


    private AnswerModel _answerModel = new();

    private async Task HandleValidAnswerSubmit()
    {
        Logger.LogInformation("Handlesubmit called");
        await AddingAnswerOnButtonClickedAsync();


    }



    private List<GetAllInfosAboutAnswer> _listOfAnswers;



    public QuestionsDesigner()
    {
        _returnedguid = Guid.Empty;
        _listOfQuestions = new List<QuestionInfo>();
        _listOfAnswers = new List<GetAllInfosAboutAnswer>();
    }



    private async Task AddingAnswerOnButtonClickedAsync()
    {
        await AddQuestionAnswerAsync();
        await GetListOfAnswersAsync();      
    }

    private async Task DeletingAnswerAsync(Guid questionID, Guid answerID)
    {
        _questionID = questionID;
        _answerID = answerID;
        await DeleteAnswerAsync();
        await GetListOfAnswersAsync();

    }

    //private async Task ModifyQuestion(_questionID)
    //{

    //}





    //Below: QuizApiClient methods


    private async Task AddQuestionAsync()
    {
        _questionID = await QuizApiClient.AddQuestionAsync(_questionModel.Question, _questionModel.Points, _questionModel.Category, _questionModel.SelectionMultiplicity);  //metoda dodaje pytanie i zwraca też guida. guid pod prywatne pole, bo będzie potrzebny do dodawania odpowiedzi

    }

    private async Task AddQuestionAnswerAsync()
    {

        _answerID = await QuizApiClient.AddQuestionAnswerAsync(_questionID, _answerModel.Answer, _answerModel.IsCorrect);  ////
    }

    private async Task DeleteAnswerAsync()
    {
        await QuizApiClient.DeleteAnswer(_questionID, _answerID);
    }

    private async Task DeleteQuestionAsync()
    {
        await QuizApiClient.DeleteQuestion(_questionID);   //to use!!!!!!
    }

    private async Task GetListOfAnswersAsync()
    {
        _listOfAnswers= await QuizApiClient.GetListOfAnswersAsync(_questionID);
    }

    private async Task GetQuestionsAsync()
    {
        _listOfQuestions = await QuizApiClient.GetQuestionsAsync(_category, _pageIndex * PageSize, PageSize + 1, _searchString);
    }
   
    }


    





