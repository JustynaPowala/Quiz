@page "/questions-designer"

@using Quiz.Contracts;
@using Quiz.WebUi.ApiClients;
@using System.ComponentModel.DataAnnotations; @*//*@
@inject IQuizApiClient  QuizApiClient;  //property in class QuestionDesginer. Początkowo nie wie mój qestions designer co zrobić. Muszę "połączyć" IQuizApiClient z  HttpQuizApiClient(który ma zawarty ten interfejs). To połączenie jest zrobione poprzez services w klasie program.//
@inject ILogger<QuestionsDesigner> Logger //

<PageTitle>Questions Designer</PageTitle>

<h1>Questions Designer</h1>

<style>
    .half-screen-textbox {
        width: 50vw;
    }
</style>

<style>
    .checkbox-design{
        height:30px; width:30px
    }
</style>

<EditForm Model="@questionModel" OnValidSubmit="@HandleValidSubmit">     
    
    <p>
        <span style="font-weight: bold;">Enter content of Your question</span>
        <br />
        <InputText id="question" class="half-screen-textbox"   @bind-Value="questionModel.Question" />
    
    </p>
    <p>
        <span style="font-weight: bold;">Choose how many points you can get in this question</span>
        <br />
        <input type="number" additionalatributes max="10" min="1" @bind-value="questionModel.Points" />
    </p>
  
        <p>
        <span style="font-weight: bold;">Select question category</span>
        <br />
        <InputSelect @bind-Value="questionModel.Category">

            <option value="default" disabled selected>Select a category</option>
            <option value="history">History</option>
            <option value="chemistry">Chemistry</option>
            <option value="mathematics">Mathematics</option>
            <option value="music">Music</option>
            <option value="information technology">Information technology</option>
        </InputSelect>
    </p>
    
    <p>
        <span style="font-weight: bold;">Select whether the question is single-choice or multiple-choice</span>
        <br />
        <InputSelect @bind-Value="questionModel.SelectionMultiplicity">
            <option value="default" disabled selected>Choose selection multiplicity</option>
            <option value="single">Single</option>
            <option value="multiple">Multiple</option>
        </InputSelect>
    </p>
    

    <DataAnnotationsValidator />
    <ValidationSummary />
    <br />
    <button type="submit" class="btn btn-primary" >Add</button>  
</EditForm>

<EditForm Model="@answerModel" OnValidSubmit="@HandleValidAnswerSubmit">
    @if (_answers == true)
    {
        <p>
            <span style="font-weight: bold;">Add answers to your question. Check the box if it is correct answer</span>
        </p>
        <InputText id="answer" class="half-screen-textbox" @bind-Value="answerModel.Answer" />

        <input type="checkbox" class="checkbox-design"  @bind-value="answerModel.IsCorrect" />

        <br />
        <button type="submit" class="btn btn-primary">Add answer</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    }
</EditForm>

@if (_answers == true)
{
    
    @if (_listOfAnswers == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var answersCounting = 1;
        <table class="table">
            <thead>
                <tr>
                    <th>No.</th>
                    <th>Answer Content</th>
                    <th>Is Correct?</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>


                @foreach (var answ in _listOfAnswers)
                {

                    <tr>
                        <td>@(answersCounting++)</td>
                        <td>@answ.AnswerContent</td>
                        <td>@(answ.IsCorrect ? _correct : _notCorrect)</td>
                        <td><button @onclick="() => DeletingAnswerAsync(answ.QeGuid, answ.AnswGuid)">Delete</button></td>
                    </tr>

                }

            </tbody>
        </table>
    }
}

  




@code {
    public class QuestionModel
    {
        [Required]
        public string? Question { get; set; }

        [Required]
        public int Points { get; set; }

        [Required]
        public string? Category { get; set; }

        [Required]
        public string? SelectionMultiplicity { get; set; }  
    }

    private QuestionModel questionModel = new();

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Handlesubmit called");

        await AddQuestionAsync();
        questionModel.Question = string.Empty;
        questionModel.Points = 1;
        questionModel.Category = "default";
        questionModel.SelectionMultiplicity = "default";
        _answers = true;
    }

    public class AnswerModel
    {
        [Required]
        public string? Answer { get; set; }
        public bool IsCorrect { get; set; }

    }
    private AnswerModel answerModel = new();

    private async Task HandleValidAnswerSubmit()
    {
        Logger.LogInformation("Handlesubmit called");
        await AddingAnswerOnButtonClickedAsync();


    }

    private Guid _returnedguid;
    private Guid _questionID;
    private Guid _answerID;
    private string _answer;
    private bool _answers = false;
    private bool _isCorrect;

  
    private string _correct = "Yes";
    private string _notCorrect = "No";


    private List<GetQuestionIdAndContent> _listOfQuestions;
    private List<GetAllInfosAboutAnswer> _listOfAnswers;



    public QuestionsDesigner()
    {
        _returnedguid = Guid.Empty;
        _listOfQuestions = new List<GetQuestionIdAndContent>();
        _listOfAnswers = new List<GetAllInfosAboutAnswer>();

    }



    private async Task AddingAnswerOnButtonClickedAsync()
    {
        await AddQuestionAnswerAsync();
        await GetListOfAnswersAsync();      

    }

    private async Task DeletingAnswerAsync(Guid questionID, Guid answerID)
    {
        _questionID = questionID;
        _answerID = answerID;
        await DeleteAnswerAsync();
        await GetListOfAnswersAsync();

    }


    private async Task AddQuestionAsync()
    {
        _questionID = await QuizApiClient.AddQuestionAsync(questionModel.Question, questionModel.Points, questionModel.Category, questionModel.SelectionMultiplicity);  //metoda dodaje pytanie i zwraca też guida. guid pod prywatne pole, bo będzie potrzebny do dodawania odpowiedzi

    }

    private async Task AddQuestionAnswerAsync()
    {

        _answerID = await QuizApiClient.AddQuestionAnswerAsync(_questionID, answerModel.Answer, answerModel.IsCorrect);  ////
    }

    private async Task DeleteAnswerAsync()
    {
        await QuizApiClient.DeleteAnswer(_questionID, _answerID);
    }

    private async Task GetListOfAnswersAsync()
    {
        _listOfAnswers= await QuizApiClient.GetListOfAnswersAsync(_questionID);
    }
    private async Task LoadTop5Async()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("http://localhost:5271");
        var response = await httpClient.GetAsync("tests/top-five");
        _listOfQuestions = await response.Content.ReadFromJsonAsync<List<GetQuestionIdAndContent>>();

    }


    


}


